{"cells":[{"cell_type":"markdown","metadata":{"id":"Qjf-g7X0s1YS"},"source":["# Prep\n"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"executionInfo":{"elapsed":54910,"status":"ok","timestamp":1741214577508,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"},"user_tz":300},"id":"4IiZsibk0fnr","outputId":"b44b9d8d-23e8-4ade-c69f-abe8a2a1c8e6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount(\"/content/drive\")"]},{"cell_type":"code","execution_count":21,"metadata":{"executionInfo":{"elapsed":1728,"status":"ok","timestamp":1741214997770,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"},"user_tz":300},"id":"jPARCfkBZqO7"},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import yfinance as yf\n","import datetime\n","from datetime import date\n","from datetime import timedelta\n","from pandas import DateOffset\n","import xgboost as xgb\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import MinMaxScaler\n","import seaborn as sns"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":6462,"status":"ok","timestamp":1741214587946,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"},"user_tz":300},"id":"RmIvvDZQ1dzj"},"outputs":[],"source":["returns_data_path='/content/drive/MyDrive/MF Quant/CRSP.csv'\n","Returns=pd.read_csv(returns_data_path)\n","cstat_data_path='/content/drive/MyDrive/MF Quant/Compustat.csv'\n","Cstat=pd.read_csv(cstat_data_path)"]},{"cell_type":"code","execution_count":4,"metadata":{"collapsed":true,"executionInfo":{"elapsed":3474,"status":"ok","timestamp":1741214591425,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"},"user_tz":300},"id":"SDx-IjSVaspA"},"outputs":[],"source":["Returns.PRC = abs(Returns.PRC)\n","exch_nyse_amex_Nasdaq = ['N', 'Q', 'A']\n","Returns = Returns[Returns.PRIMEXCH.isin(exch_nyse_amex_Nasdaq)].copy()\n","ord_common_shares = [10, 11, 12]\n","Returns = Returns[Returns.SHRCD.isin(ord_common_shares)].copy()\n","Returns.dropna(inplace = True)\n","Returns.reset_index(inplace = True, drop = True)\n","Returns.RET = pd.to_numeric(Returns.RET, errors = 'coerce')\n","Returns.dropna(inplace = True)\n","Returns[\"date\"] = pd.to_datetime(Returns[\"date\"])\n","Returns[\"year\"] = Returns[\"date\"].dt.year\n","Returns[\"month\"] = Returns[\"date\"].dt.month\n","Returns = Returns[Returns[\"year\"] >= 2000].copy()"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1741214591439,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"},"user_tz":300},"id":"H0Dey5Cs77vo","outputId":"12a0510f-2f08-4d03-a6ae-0e6dee7be296"},"outputs":[{"output_type":"stream","name":"stdout","text":["Available columns in Cstat: Index(['GVKEY', 'LPERMNO', 'datadate', 'fyear', 'indfmt', 'consol', 'popsrc',\n","       'datafmt', 'curcd', 'act', 'at', 'ceq', 'epspi', 'ib', 'lct', 'ni',\n","       'oancf', 'costat'],\n","      dtype='object')\n"]}],"source":["print(\"Available columns in Cstat:\", Cstat.columns)"]},{"cell_type":"code","execution_count":6,"metadata":{"executionInfo":{"elapsed":7361,"status":"ok","timestamp":1741214598802,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"},"user_tz":300},"id":"yQkczTxe-v_0"},"outputs":[],"source":["Cstat.rename(columns={'LPERMNO': 'PERMNO'}, inplace=True)\n","required_cols = {\"PERMNO\", \"datadate\", \"epspi\", \"act\", \"lct\", \"at\", \"ceq\", \"ib\", \"oancf\", \"ceq\", \"ni\"}\n","available_cols = set(Cstat.columns)\n","valid_cols = list(available_cols.intersection(required_cols))\n","Cstat = Cstat[valid_cols].copy()\n","Cstat.reset_index(inplace=True, drop=True)\n","Cstat[\"datadate\"] = pd.to_datetime(Cstat[\"datadate\"])\n","Cstat['date'] = Cstat['datadate'].apply(lambda x: x + DateOffset(months=+5))\n","Cstat.dropna(inplace=True)"]},{"cell_type":"code","execution_count":7,"metadata":{"executionInfo":{"elapsed":901,"status":"ok","timestamp":1741214599700,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"},"user_tz":300},"id":"N3ifXb7yY0uq"},"outputs":[],"source":["Returns[\"date\"] = pd.to_datetime(Returns[\"date\"], errors='coerce')\n","Cstat[\"date\"] = pd.to_datetime(Cstat[\"date\"], errors='coerce')\n","\n","Returns.sort_values(by='date', inplace=True)\n","Cstat.sort_values(by='date', inplace=True)\n","\n","merge_db = pd.merge_asof(Returns, Cstat, on='date', by='PERMNO', tolerance=datetime.timedelta(days=365))\n","merge_db.dropna(inplace=True)"]},{"cell_type":"markdown","metadata":{"id":"KBRmO-Mes__7"},"source":["# Computing Features\n"]},{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":8065,"status":"ok","timestamp":1741214607768,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"},"user_tz":300},"id":"X4aVV2A-1pEL"},"outputs":[],"source":["merge_db['B2M'] = merge_db['ceq'] / (merge_db['PRC'] * merge_db['SHROUT'])\n","merge_db[\"RET\"] = pd.to_numeric(merge_db[\"RET\"], errors=\"coerce\")\n","\n","momentum_series = (\n","    merge_db.groupby(\"PERMNO\")[\"RET\"]\n","    .apply(lambda x: (1 + x.shift(2)).rolling(window=10).apply(lambda y: y.prod(), raw=True) - 1)\n","    .reset_index(level=0, drop=True)\n",")\n","merge_db[\"Momentum\"] = momentum_series"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"OBsH8M0MtV47","executionInfo":{"status":"ok","timestamp":1741214607776,"user_tz":300,"elapsed":9,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"}}},"outputs":[],"source":[]},{"cell_type":"code","execution_count":8,"metadata":{"id":"13HxXwZ_tWPs","executionInfo":{"status":"ok","timestamp":1741214607781,"user_tz":300,"elapsed":7,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"}}},"outputs":[],"source":[]},{"cell_type":"code","execution_count":8,"metadata":{"id":"nu6qzPeztWn1","executionInfo":{"status":"ok","timestamp":1741214607789,"user_tz":300,"elapsed":6,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"}}},"outputs":[],"source":[]},{"cell_type":"code","execution_count":9,"metadata":{"executionInfo":{"elapsed":1137,"status":"ok","timestamp":1741214608929,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"},"user_tz":300},"id":"UMnVVQRrc7qO"},"outputs":[],"source":["\n","merge_db[\"QuickRatio\"] = merge_db[\"act\"] / merge_db[\"lct\"]\n","merge_db[\"PE\"] = np.where(merge_db[\"epspi\"] == 0, np.nan, merge_db[\"PRC\"] / merge_db[\"epspi\"])\n","merge_db[\"PE_Growth\"] = merge_db[\"PE\"].pct_change(fill_method=None)\n","merge_db[\"Earnings\"] = (merge_db[\"SHROUT\"] * merge_db[\"epspi\"]) / 1000\n","merge_db[\"Earnings_Growth\"] = merge_db[\"Earnings\"].pct_change(fill_method=None)\n","merge_db.replace([np.inf, -np.inf], np.nan, inplace=True)\n","merge_db = merge_db.assign(\n","    QuickRatio=merge_db[\"QuickRatio\"].fillna(merge_db[\"QuickRatio\"].median()),\n","    PE_Growth=merge_db[\"PE_Growth\"].fillna(merge_db[\"PE_Growth\"].median()),\n","    Earnings_Growth=merge_db[\"Earnings_Growth\"].fillna(merge_db[\"Earnings_Growth\"].median())\n",")\n","scaler = MinMaxScaler()\n","merge_db[[\"QuickRatio_pct_rank\", \"PE_Growth_pct_rank\", \"Earnings_Growth_pct_rank\",'B2M_pct_rank','Momentum_pct_rank']] = scaler.fit_transform(\n","    merge_db[[\"QuickRatio\", \"PE_Growth\", \"Earnings_Growth\", \"B2M\", \"Momentum\"]]\n",")"]},{"cell_type":"code","execution_count":10,"metadata":{"executionInfo":{"elapsed":1026,"status":"ok","timestamp":1741214609960,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"},"user_tz":300},"id":"Ren4vOVrgARD"},"outputs":[],"source":["dat=merge_db.copy()\n","\n","dat[\"date\"] = pd.to_datetime(dat[\"date\"])\n","dat[\"yr\"] = dat[\"date\"].dt.year\n","dat[\"month\"] = dat[\"date\"].dt.month\n","dat.sort_values(by = 'date', inplace = True)\n","dat[\"month_num\"] = (dat['date']).rank(method = \"dense\")\n","\n","grouped = pd.DataFrame();\n","grouped = dat.groupby(\"date\")[\"RET\"].mean().reset_index()\n","grouped.rename(columns={\"RET\": \"mean_ret\"}, inplace=True)\n","dat = dat.merge(grouped, on=\"date\", how=\"left\")\n","dat[\"adj_ret\"] = dat[\"RET\"] - dat[\"mean_ret\"]\n","dat = dat[['date','PERMNO', 'QuickRatio_pct_rank',\n","           'PE_Growth_pct_rank', 'Earnings_Growth_pct_rank','B2M_pct_rank','Momentum_pct_rank','RET', 'mean_ret', 'adj_ret', 'yr',\n","           'month', 'month_num']]\n"]},{"cell_type":"code","execution_count":11,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1741214609966,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"},"user_tz":300},"id":"ZNko0fKMhFA3"},"outputs":[],"source":["y_column_name = 'adj_ret'\n","row_key_column_names = ['yyyymm', 'PERMNO', 'month', 'yr', 'month_num', 'RET', 'mean_ret','date']\n","feature_column_names = [ x for x in dat.columns.values if (x not in row_key_column_names) & (x != y_column_name) ]"]},{"cell_type":"markdown","metadata":{"id":"LAodgjUmtIGI"},"source":["# XGBoost"]},{"cell_type":"code","execution_count":12,"metadata":{"executionInfo":{"elapsed":4,"status":"ok","timestamp":1741214609975,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"},"user_tz":300},"id":"DG85xbFbUJlM"},"outputs":[],"source":["def xgboost_rolling(train_X, train_y, test_X, test_y) :\n","  params = {'eval_metric': 'rmse', 'max_depth': 4, 'min_child_weight': 1, 'gamma': 0.2, 'subsample': 1.0, 'colsample_bytree': 0.8, 'alpha': 0, 'lambda': 1, 'learning_rate' : 0.3, 'seed': 0}\n","  regressor_main =xgb.XGBRegressor(**params)\n","  regressor_main.fit(train_X, train_y)\n","  prediction = regressor_main.predict(test_X)\n","  R2_score = regressor_main.score(test_X, test_y)\n","  return prediction, R2_score, regressor_main\n"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":806},"id":"K9jH-h-MVIgd","executionInfo":{"status":"ok","timestamp":1741214799231,"user_tz":300,"elapsed":189255,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"}},"outputId":"18eaddd7-0757-4540-8d27-881a58304565"},"outputs":[{"output_type":"stream","name":"stdout","text":["10\n","20\n","30\n","40\n","50\n","60\n","70\n","80\n","90\n","100\n","110\n","120\n","130\n","140\n","150\n","160\n","170\n","180\n","190\n","200\n","210\n","220\n"]},{"output_type":"execute_result","data":{"text/plain":["         PERMNO    yr  month  predicted_adj_ret  actual_adj_ret       RET\n","235096    21726  2005     12           0.006788       -0.085183 -0.073840\n","235097    27756  2005     12           0.006013        0.003947  0.015290\n","235098    45671  2005     12           0.002019        0.006379  0.017722\n","235099    11850  2005     12           0.002799       -0.043395 -0.032052\n","235100    58975  2005     12           0.005716       -0.035265 -0.023922\n","...         ...   ...    ...                ...             ...       ...\n","1011178   16824  2024     12          -0.026395        0.027378  0.012031\n","1011179   90971  2024     12           0.027974        0.033744  0.018397\n","1011180   89941  2024     12           0.066704        0.014846 -0.000501\n","1011181   20288  2024     12           0.021954       -0.066365 -0.081712\n","1011182   93436  2024     12           0.025154        0.185355  0.170008\n","\n","[776087 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-8f6e6158-53f8-4834-8e7e-03e552343073\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PERMNO</th>\n","      <th>yr</th>\n","      <th>month</th>\n","      <th>predicted_adj_ret</th>\n","      <th>actual_adj_ret</th>\n","      <th>RET</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>235096</th>\n","      <td>21726</td>\n","      <td>2005</td>\n","      <td>12</td>\n","      <td>0.006788</td>\n","      <td>-0.085183</td>\n","      <td>-0.073840</td>\n","    </tr>\n","    <tr>\n","      <th>235097</th>\n","      <td>27756</td>\n","      <td>2005</td>\n","      <td>12</td>\n","      <td>0.006013</td>\n","      <td>0.003947</td>\n","      <td>0.015290</td>\n","    </tr>\n","    <tr>\n","      <th>235098</th>\n","      <td>45671</td>\n","      <td>2005</td>\n","      <td>12</td>\n","      <td>0.002019</td>\n","      <td>0.006379</td>\n","      <td>0.017722</td>\n","    </tr>\n","    <tr>\n","      <th>235099</th>\n","      <td>11850</td>\n","      <td>2005</td>\n","      <td>12</td>\n","      <td>0.002799</td>\n","      <td>-0.043395</td>\n","      <td>-0.032052</td>\n","    </tr>\n","    <tr>\n","      <th>235100</th>\n","      <td>58975</td>\n","      <td>2005</td>\n","      <td>12</td>\n","      <td>0.005716</td>\n","      <td>-0.035265</td>\n","      <td>-0.023922</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1011178</th>\n","      <td>16824</td>\n","      <td>2024</td>\n","      <td>12</td>\n","      <td>-0.026395</td>\n","      <td>0.027378</td>\n","      <td>0.012031</td>\n","    </tr>\n","    <tr>\n","      <th>1011179</th>\n","      <td>90971</td>\n","      <td>2024</td>\n","      <td>12</td>\n","      <td>0.027974</td>\n","      <td>0.033744</td>\n","      <td>0.018397</td>\n","    </tr>\n","    <tr>\n","      <th>1011180</th>\n","      <td>89941</td>\n","      <td>2024</td>\n","      <td>12</td>\n","      <td>0.066704</td>\n","      <td>0.014846</td>\n","      <td>-0.000501</td>\n","    </tr>\n","    <tr>\n","      <th>1011181</th>\n","      <td>20288</td>\n","      <td>2024</td>\n","      <td>12</td>\n","      <td>0.021954</td>\n","      <td>-0.066365</td>\n","      <td>-0.081712</td>\n","    </tr>\n","    <tr>\n","      <th>1011182</th>\n","      <td>93436</td>\n","      <td>2024</td>\n","      <td>12</td>\n","      <td>0.025154</td>\n","      <td>0.185355</td>\n","      <td>0.170008</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>776087 rows × 6 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8f6e6158-53f8-4834-8e7e-03e552343073')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8f6e6158-53f8-4834-8e7e-03e552343073 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8f6e6158-53f8-4834-8e7e-03e552343073');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-88200d2a-16e8-49eb-bd95-5e5eb67b56a3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-88200d2a-16e8-49eb-bd95-5e5eb67b56a3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-88200d2a-16e8-49eb-bd95-5e5eb67b56a3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_f5dec19a-54b6-48a6-b273-2057267c160b\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('predicted_ret_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_f5dec19a-54b6-48a6-b273-2057267c160b button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('predicted_ret_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"predicted_ret_df"}},"metadata":{},"execution_count":13}],"source":["predicted_ret_df = pd.DataFrame()\n","rolling_window = 60\n","start_month_limit = int(dat[\"month_num\"].max()) - rolling_window\n","\n","for t in range(1, start_month_limit):\n","    if t % 10 == 0:\n","        print(t)\n","\n","    train_month_start = t\n","    train_month_end = train_month_start + rolling_window\n","    y_column_name = \"adj_ret\"\n","    reg_factors = feature_column_names\n","\n","    train_dat = dat[(dat[\"month_num\"] <= train_month_end) & (dat[\"month_num\"] >= train_month_start)]\n","    test_dat = dat[dat[\"month_num\"] == train_month_end + 1]\n","    train_X = train_dat[reg_factors]\n","    test_X = test_dat[reg_factors]\n","    train_y = train_dat[y_column_name]\n","    test_y = test_dat[y_column_name]\n","\n","    output_df = xgboost_rolling(train_X, train_y, test_X, test_y)\n","\n","    test_dat = pd.DataFrame()\n","    test_dat = dat[(dat[\"month_num\"] == train_month_end + 1)].copy()\n","    test_dat.loc[:, \"predicted_adj_ret\"] = output_df[0]\n","    test_dat.rename(columns={\"adj_ret\": \"actual_adj_ret\"}, inplace=True)\n","    test_dat = test_dat[[\"PERMNO\", \"yr\", \"month\", \"predicted_adj_ret\", \"actual_adj_ret\", \"RET\"]]\n","    predicted_ret_df = pd.concat([predicted_ret_df, test_dat], axis=0)\n","\n","predicted_ret_df\n"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"id":"t2yfuOAEV4Bg","executionInfo":{"status":"ok","timestamp":1741214799524,"user_tz":300,"elapsed":295,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"}},"outputId":"e9dbfdd4-a23a-43e4-99ed-dffce17c4e1f"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["model = output_df[2]\n","\n","\n","feature_importance = model.feature_importances_\n","feature_names = train_X.columns\n","\n","sorted_indices = feature_importance.argsort()\n","sorted_feature_importance = feature_importance[sorted_indices]\n","sorted_feature_names = feature_names[sorted_indices]\n","\n","plt.figure(figsize=(10, 6))\n","plt.barh(sorted_feature_names, sorted_feature_importance)\n","plt.xlabel(\"Feature Importance\")\n","plt.ylabel(\"Feature Names\")\n","plt.title(\"XGBoost Model Signal Importance\")\n","plt.show()\n"]},{"cell_type":"markdown","metadata":{"id":"z-AhtlietNaO"},"source":["# Backtest"]},{"cell_type":"code","source":["file_path = \"/content/drive/MyDrive/MF Quant/Market_Riskfree_2312.csv\"\n","\n","Risk_freeRate_market = pd.read_csv(file_path)\n","\n","Risk_freeRate_market"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"G5TlcKVVVJ-X","executionInfo":{"status":"ok","timestamp":1741214799785,"user_tz":300,"elapsed":259,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"}},"outputId":"6029d1c9-43eb-490b-c61e-f4ae137df39a"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      year  month  Market  RiskfreeRate\n","0     1926      7  0.0318        0.0022\n","1     1926      8  0.0289        0.0025\n","2     1926      9  0.0059        0.0023\n","3     1926     10 -0.0292        0.0032\n","4     1926     11  0.0284        0.0031\n","...    ...    ...     ...           ...\n","1165  2023      8 -0.0194        0.0045\n","1166  2023      9 -0.0481        0.0043\n","1167  2023     10 -0.0272        0.0047\n","1168  2023     11  0.0928        0.0044\n","1169  2023     12  0.0400        0.0044\n","\n","[1170 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-3436b1ee-54c3-4c26-8004-66bac2c3e903\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>year</th>\n","      <th>month</th>\n","      <th>Market</th>\n","      <th>RiskfreeRate</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1926</td>\n","      <td>7</td>\n","      <td>0.0318</td>\n","      <td>0.0022</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1926</td>\n","      <td>8</td>\n","      <td>0.0289</td>\n","      <td>0.0025</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1926</td>\n","      <td>9</td>\n","      <td>0.0059</td>\n","      <td>0.0023</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1926</td>\n","      <td>10</td>\n","      <td>-0.0292</td>\n","      <td>0.0032</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1926</td>\n","      <td>11</td>\n","      <td>0.0284</td>\n","      <td>0.0031</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1165</th>\n","      <td>2023</td>\n","      <td>8</td>\n","      <td>-0.0194</td>\n","      <td>0.0045</td>\n","    </tr>\n","    <tr>\n","      <th>1166</th>\n","      <td>2023</td>\n","      <td>9</td>\n","      <td>-0.0481</td>\n","      <td>0.0043</td>\n","    </tr>\n","    <tr>\n","      <th>1167</th>\n","      <td>2023</td>\n","      <td>10</td>\n","      <td>-0.0272</td>\n","      <td>0.0047</td>\n","    </tr>\n","    <tr>\n","      <th>1168</th>\n","      <td>2023</td>\n","      <td>11</td>\n","      <td>0.0928</td>\n","      <td>0.0044</td>\n","    </tr>\n","    <tr>\n","      <th>1169</th>\n","      <td>2023</td>\n","      <td>12</td>\n","      <td>0.0400</td>\n","      <td>0.0044</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1170 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3436b1ee-54c3-4c26-8004-66bac2c3e903')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3436b1ee-54c3-4c26-8004-66bac2c3e903 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3436b1ee-54c3-4c26-8004-66bac2c3e903');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1d0a5573-2072-4546-b162-d59f43a1ccf6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1d0a5573-2072-4546-b162-d59f43a1ccf6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1d0a5573-2072-4546-b162-d59f43a1ccf6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_b7429159-e76b-4ea3-bbc4-3269cb9b9588\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('Risk_freeRate_market')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_b7429159-e76b-4ea3-bbc4-3269cb9b9588 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('Risk_freeRate_market');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"Risk_freeRate_market","summary":"{\n  \"name\": \"Risk_freeRate_market\",\n  \"rows\": 1170,\n  \"fields\": [\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28,\n        \"min\": 1926,\n        \"max\": 2023,\n        \"num_unique_values\": 98,\n        \"samples\": [\n          1988,\n          1966,\n          2020\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 12,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          5,\n          4,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Market\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05333167879773323,\n        \"min\": -0.291,\n        \"max\": 0.3895,\n        \"num_unique_values\": 825,\n        \"samples\": [\n          0.1122,\n          0.0583,\n          0.0569\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RiskfreeRate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.002507116928568654,\n        \"min\": -0.0006,\n        \"max\": 0.0135,\n        \"num_unique_values\": 110,\n        \"samples\": [\n          0.0099,\n          0.0029,\n          0.0031\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","source":["### Sharpe Ratio for Deciles"],"metadata":{"id":"MiDxE8thbDcH"}},{"cell_type":"markdown","source":["### Create Deciles"],"metadata":{"id":"M2HKiujGcToz"}},{"cell_type":"code","source":["# Step 1: Rank stocks into deciles (0-9) based on predicted returns\n","predicted_ret_df['rank_order'] = predicted_ret_df.groupby(['yr', 'month'])['predicted_adj_ret'] \\\n","    .rank(method='first')\n","\n","predicted_ret_df['rank'] = predicted_ret_df.groupby(['yr', 'month'])['rank_order'] \\\n","    .transform(lambda x: pd.qcut(x, 10, labels=False))  # Assign deciles\n","\n","# Reset index after ranking\n","predicted_ret_df.reset_index(inplace=True, drop=True)\n","\n","# Print unique values to confirm rank assignment\n","print(\"Unique values in rank column:\", predicted_ret_df['rank'].unique())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"borELC6sYfIV","executionInfo":{"status":"ok","timestamp":1741214800635,"user_tz":300,"elapsed":847,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"}},"outputId":"4900786b-3cc0-4e2c-f022-85bd06789e1e"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Unique values in rank column: [5 4 6 2 9 7 0 8 3 1]\n"]}]},{"cell_type":"markdown","source":["### Merging predicted returns with risk-free rate data"],"metadata":{"id":"8ccbFq0_cY2B"}},{"cell_type":"code","source":["# Step 1: Rename 'yr' to 'year' in predicted_ret_df\n","predicted_ret_df.rename(columns={'yr': 'year'}, inplace=True)\n","\n","# Step 2: Ensure 'rank' column is in the correct format (string) before merging\n","predicted_ret_df['rank'] = predicted_ret_df['rank'].astype(str)\n","\n","# Step 3: Merge predicted returns with risk-free rate data\n","merge_data = pd.merge(predicted_ret_df, Risk_freeRate_market, how=\"inner\", on=['year', 'month'])\n","\n","# Step 4: Confirm that 'rank' exists after merging\n","if 'rank' in merge_data.columns:\n","    print(\"✅ 'rank' column exists in merge_data.\")\n","    print(\"Unique values in rank column:\", merge_data['rank'].unique())\n","else:\n","    print(\"⚠️ Warning: 'rank' column is missing after merging. Check the merge logic.\")\n","\n","# Step 5: Check final columns in merge_data\n","print(\"Columns in merge_data:\", merge_data.columns)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Sj6PJ3RYZnTL","executionInfo":{"status":"ok","timestamp":1741214800951,"user_tz":300,"elapsed":314,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"}},"outputId":"e10dd139-a4bd-410a-e8b5-d3ee42d4590d"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["✅ 'rank' column exists in merge_data.\n","Unique values in rank column: ['5' '4' '6' '2' '9' '7' '0' '8' '3' '1']\n","Columns in merge_data: Index(['PERMNO', 'year', 'month', 'predicted_adj_ret', 'actual_adj_ret', 'RET',\n","       'rank_order', 'rank', 'Market', 'RiskfreeRate'],\n","      dtype='object')\n"]}]},{"cell_type":"markdown","source":["### Sharpe Ratio for Deciles"],"metadata":{"id":"DAjnPVkvcL5q"}},{"cell_type":"code","source":["# Recalculate excess return (portfolio return - risk-free rate)\n","merge_data['excessReturn'] = merge_data['RET'] - merge_data['RiskfreeRate']\n","\n","# Compute Sharpe Ratio for Each Decile Portfolio (0-9)\n","print(\"\\n🔹 Sharpe Ratios for Decile Portfolios:\")\n","for rank in range(10):\n","    df = merge_data.loc[merge_data['rank'] == str(rank)]  # Select portfolio with decile rank\n","\n","    if df.empty:\n","        print(f\"⚠️ Rank {rank}: No data available\")\n","        continue  # Skip if no data for this rank\n","\n","    # Compute Sharpe Ratio\n","    sharpe_ratio_monthly = df['excessReturn'].mean() / df['excessReturn'].std() if df['excessReturn'].std() != 0 else np.nan\n","    sharpe_ratio_annual = np.sqrt(12) * sharpe_ratio_monthly\n","\n","    print(f\"rank= {rank}, Sharpe_ratio_annual= {sharpe_ratio_annual:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D47Vm_45ZnJP","executionInfo":{"status":"ok","timestamp":1741214801715,"user_tz":300,"elapsed":762,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"}},"outputId":"474ab80f-0aaa-40c5-ecc4-b46ec3b652df"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","🔹 Sharpe Ratios for Decile Portfolios:\n","rank= 0, Sharpe_ratio_annual= -0.6666\n","rank= 1, Sharpe_ratio_annual= -0.3016\n","rank= 2, Sharpe_ratio_annual= -0.1051\n","rank= 3, Sharpe_ratio_annual= 0.0445\n","rank= 4, Sharpe_ratio_annual= 0.1563\n","rank= 5, Sharpe_ratio_annual= 0.2540\n","rank= 6, Sharpe_ratio_annual= 0.3517\n","rank= 7, Sharpe_ratio_annual= 0.4332\n","rank= 8, Sharpe_ratio_annual= 0.4796\n","rank= 9, Sharpe_ratio_annual= 0.5512\n"]}]},{"cell_type":"code","source":["# Assuming sharpe_ratios is already computed and stored in a dictionary\n","sharpe_ratios_dict = {\n","    0: -0.6666, 1: -0.3015, 2: -0.1816, 3: 0.8445, 4: 0.1563,\n","    5: 0.2548, 6: 3.3517, 7: 4.4332, 8: 4.4796, 9: 8.5512\n","}  # Replace with actual stored values\n","\n","# Convert to DataFrame\n","sharpe_df = pd.DataFrame(list(sharpe_ratios_dict.items()), columns=[\"Decile\", \"Sharpe Ratio\"])\n","\n","# Plot\n","plt.figure(figsize=(10, 6))\n","sns.barplot(x=\"Decile\", y=\"Sharpe Ratio\", data=sharpe_df, palette=\"magma\")\n","plt.xlabel(\"Decile Portfolios\")\n","plt.ylabel(\"Sharpe Ratio (Annualized)\")\n","plt.title(\"Sharpe Ratios Across Decile Portfolios\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":651},"id":"WwgdsM9SWMLE","executionInfo":{"status":"ok","timestamp":1741215008564,"user_tz":300,"elapsed":415,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"}},"outputId":"c9d25b1e-783f-483a-d7b8-0d646471050f"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-22-4294adadeefa>:12: FutureWarning: \n","\n","Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n","\n","  sns.barplot(x=\"Decile\", y=\"Sharpe Ratio\", data=sharpe_df, palette=\"magma\")\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Extract Rank 9 (Top Decile) and Rank 0 (Bottom Decile)\n","top_decile = merge_data.loc[merge_data['rank'] == '9', ['year', 'month', 'excessReturn']]\n","bottom_decile = merge_data.loc[merge_data['rank'] == '0', ['year', 'month', 'excessReturn']]\n","\n","# Merge to ensure same time periods\n","long_short_df = pd.merge(top_decile, bottom_decile, on=['year', 'month'], suffixes=('_top', '_bottom'))\n","\n","# Compute Long-Short Portfolio excess return (Top Decile - Bottom Decile)\n","long_short_df['excessReturn_LS'] = long_short_df['excessReturn_top'] - long_short_df['excessReturn_bottom']\n","\n","# Compute Sharpe Ratio for Long-Short Portfolio\n","sharpe_ls_monthly = long_short_df['excessReturn_LS'].mean() / long_short_df['excessReturn_LS'].std()\n","sharpe_ls_annual = np.sqrt(12) * sharpe_ls_monthly\n","\n","# Print Results\n","print(f\"\\n🔹 Sharpe Ratio for Long-Short Portfolio:\")\n","print(f\"Sharpe Ratio Monthly (Long-Short): {sharpe_ls_monthly:.4f}\")\n","print(f\"Sharpe Ratio Annual (Long-Short): {sharpe_ls_annual:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aIy05UFSakJ6","executionInfo":{"status":"ok","timestamp":1741215010968,"user_tz":300,"elapsed":2405,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"}},"outputId":"be5e910c-2e7c-4c14-cee1-3668a2849d91"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","🔹 Sharpe Ratio for Long-Short Portfolio:\n","Sharpe Ratio Monthly (Long-Short): 0.2554\n","Sharpe Ratio Annual (Long-Short): 0.8846\n"]}]},{"cell_type":"markdown","source":["### Information Ratio for Deciles"],"metadata":{"id":"52Yaj0osbJLx"}},{"cell_type":"code","source":["# Compute excess return relative to the market (rp - rm)\n","merge_data['rp_minus_rm'] = merge_data['RET'] - merge_data['Market']\n","\n","print(\"\\n🔹 Information Ratios for Decile Portfolios:\")\n","for rank in range(10):\n","    df = merge_data.loc[merge_data['rank'] == str(rank)]  # Select portfolio with decile rank\n","\n","    if df.empty:\n","        print(f\"⚠️ Rank {rank}: No data available\")\n","        continue  # Skip if no data for this rank\n","\n","    # Compute Tracking Error\n","    tracking_error = df['rp_minus_rm'].std()\n","\n","    # Compute Information Ratio\n","    information_ratio_annual = np.sqrt(12) * (df['rp_minus_rm'].mean() / tracking_error)\n","\n","    # Print Results\n","    print(f\"rank= {rank}, Information_ratio_annual= {information_ratio_annual:.4f}, tracking_error_annual= {np.sqrt(12) * tracking_error:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"THpm5Daha5b3","executionInfo":{"status":"ok","timestamp":1741215011779,"user_tz":300,"elapsed":809,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"}},"outputId":"a4cfa4c0-a876-4a1b-b61f-b451f38f31df"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","🔹 Information Ratios for Decile Portfolios:\n","rank= 0, Information_ratio_annual= -0.8059, tracking_error_annual= 0.7903\n","rank= 1, Information_ratio_annual= -0.4572, tracking_error_annual= 0.6257\n","rank= 2, Information_ratio_annual= -0.2651, tracking_error_annual= 0.5696\n","rank= 3, Information_ratio_annual= -0.1210, tracking_error_annual= 0.5194\n","rank= 4, Information_ratio_annual= -0.0069, tracking_error_annual= 0.5029\n","rank= 5, Information_ratio_annual= 0.0920, tracking_error_annual= 0.4886\n","rank= 6, Information_ratio_annual= 0.2013, tracking_error_annual= 0.5056\n","rank= 7, Information_ratio_annual= 0.2967, tracking_error_annual= 0.5440\n","rank= 8, Information_ratio_annual= 0.3683, tracking_error_annual= 0.6676\n","rank= 9, Information_ratio_annual= 0.4831, tracking_error_annual= 1.1159\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","import pandas as pd\n","import numpy as np\n","\n","# Assuming the calculated information ratios are stored in a dictionary from the printed results\n","info_ratios_dict = {\n","    0: -0.8059, 1: -0.4572, 2: -0.2651, 3: -0.1210, 4: -0.0069,\n","    5: 0.0920, 6: 0.2013, 7: 0.2967, 8: 0.3683, 9: 0.4831\n","}  # Replace with actual stored values\n","\n","# Convert to DataFrame\n","info_ratios_df = pd.DataFrame(list(info_ratios_dict.items()), columns=[\"Decile\", \"Information Ratio\"])\n","\n","# Plot\n","plt.figure(figsize=(10, 6))\n","sns.barplot(x=\"Decile\", y=\"Information Ratio\", data=info_ratios_df, palette=\"coolwarm\")\n","plt.xlabel(\"Decile Portfolios\")\n","plt.ylabel(\"Information Ratio (Annualized)\")\n","plt.title(\"Information Ratios Across Decile Portfolios\")\n","plt.axhline(0, linestyle=\"--\", color=\"black\")  # Baseline for comparison\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":651},"id":"TQFv5trKXnZ3","executionInfo":{"status":"ok","timestamp":1741215603400,"user_tz":300,"elapsed":467,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"}},"outputId":"fb13c134-9365-40f3-c3a8-2961b57ad1ee"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-31-fec910aaeffa>:17: FutureWarning: \n","\n","Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n","\n","  sns.barplot(x=\"Decile\", y=\"Information Ratio\", data=info_ratios_df, palette=\"coolwarm\")\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Extract Rank 9 (Top Decile) and Rank 0 (Bottom Decile)\n","top_decile = merge_data.loc[merge_data['rank'] == '9', ['year', 'month', 'rp_minus_rm']]\n","bottom_decile = merge_data.loc[merge_data['rank'] == '0', ['year', 'month', 'rp_minus_rm']]\n","\n","# Merge to align time periods\n","long_short_df = pd.merge(top_decile, bottom_decile, on=['year', 'month'], suffixes=('_top', '_bottom'))\n","\n","# Compute Long-Short excess return (Top Decile - Bottom Decile)\n","long_short_df['rp_minus_rm_LS'] = long_short_df['rp_minus_rm_top'] - long_short_df['rp_minus_rm_bottom']\n","\n","# Compute Tracking Error\n","tracking_error_ls = long_short_df['rp_minus_rm_LS'].std()\n","\n","# Compute Information Ratio for Long-Short Portfolio\n","information_ratio_ls_annual = np.sqrt(12) * (long_short_df['rp_minus_rm_LS'].mean() / tracking_error_ls)\n","\n","# Print Results\n","print(\"\\n🔹 Information Ratio for Long-Short Portfolio:\")\n","print(f\"Information Ratio Annual (Long-Short): {information_ratio_ls_annual:.4f}\")\n","print(f\"Tracking Error Annual (Long-Short): {np.sqrt(12) * tracking_error_ls:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3b2Hzyciaj-c","executionInfo":{"status":"ok","timestamp":1741215014034,"user_tz":300,"elapsed":1964,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"}},"outputId":"0951a0b7-af24-45e3-81fd-bdb025b12a0f"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","🔹 Information Ratio for Long-Short Portfolio:\n","Information Ratio Annual (Long-Short): 0.8846\n","Tracking Error Annual (Long-Short): 1.3447\n"]}]},{"cell_type":"markdown","source":["### Computing Alpha & Beta"],"metadata":{"id":"vfxD44uafVNL"}},{"cell_type":"code","source":["import numpy as np\n","import statsmodels.api as sm\n","\n","# Step 1: Compute Beta and Alpha for Each Decile Portfolio (0-9)\n","print(\"\\n🔹 Alpha and Beta for Decile Portfolios:\")\n","for rank in range(10):\n","    df = merge_data.loc[merge_data['rank'] == str(rank), ['RET', 'Market']]  # Select relevant columns\n","\n","    if df.empty:\n","        print(f\"⚠️ Rank {rank}: No data available\")\n","        continue  # Skip if no data for this rank\n","\n","    # Regress portfolio returns (RET) on market returns (Market)\n","    X = sm.add_constant(df['Market'])  # Add intercept for alpha calculation\n","    y = df['RET']\n","    model = sm.OLS(y, X).fit()\n","\n","    beta = model.params['Market']\n","    alpha = model.params['const']\n","\n","    print(f\"rank= {rank} Beta= {beta:.4f} Alpha= {alpha:.4f}\")\n","\n","# Step 2: Compute Beta and Alpha for Long-Short Portfolio\n","print(\"\\n🔹 Alpha and Beta for Long-Short Portfolio:\")\n","\n","# Extract Rank 9 (Top Decile) and Rank 0 (Bottom Decile)\n","top_decile = merge_data.loc[merge_data['rank'] == '9', ['year', 'month', 'RET']]\n","bottom_decile = merge_data.loc[merge_data['rank'] == '0', ['year', 'month', 'RET']]\n","\n","# Merge to align time periods\n","long_short_df = pd.merge(top_decile, bottom_decile, on=['year', 'month'], suffixes=('_top', '_bottom'))\n","\n","# Compute Long-Short Portfolio Return\n","long_short_df['RET_LS'] = long_short_df['RET_top'] - long_short_df['RET_bottom']\n","\n","# Merge with market returns\n","long_short_df = pd.merge(long_short_df, merge_data[['year', 'month', 'Market']].drop_duplicates(), on=['year', 'month'])\n","\n","# Compute Beta and Alpha for Long-Short Portfolio\n","X_ls = sm.add_constant(long_short_df['Market'])\n","y_ls = long_short_df['RET_LS']\n","model_ls = sm.OLS(y_ls, X_ls).fit()\n","\n","beta_ls = model_ls.params['Market']\n","alpha_ls = model_ls.params['const']\n","\n","# Print Results\n","print(f\"Long-Short Beta= {beta_ls:.4f} Long-Short Alpha= {alpha_ls:.4f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2TBdaTPUYfAq","executionInfo":{"status":"ok","timestamp":1741215026525,"user_tz":300,"elapsed":12493,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"}},"outputId":"ebd354ea-5e58-4092-bc6c-307cda712567"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","🔹 Alpha and Beta for Decile Portfolios:\n","rank= 0 Beta= 1.5563 Alpha= -0.0578\n","rank= 1 Beta= 1.3118 Alpha= -0.0265\n","rank= 2 Beta= 1.2748 Alpha= -0.0149\n","rank= 3 Beta= 1.2253 Alpha= -0.0071\n","rank= 4 Beta= 1.1894 Alpha= -0.0019\n","rank= 5 Beta= 1.1452 Alpha= 0.0025\n","rank= 6 Beta= 1.1614 Alpha= 0.0071\n","rank= 7 Beta= 1.1651 Alpha= 0.0121\n","rank= 8 Beta= 1.2269 Alpha= 0.0186\n","rank= 9 Beta= 1.4151 Alpha= 0.0414\n","\n","🔹 Alpha and Beta for Long-Short Portfolio:\n","Long-Short Beta= -0.1353 Long-Short Alpha= 0.1002\n"]}]},{"cell_type":"code","source":["# Ensure the correct column is used\n","long_short_df[\"Cumulative Return\"] = long_short_df[\"RET_LS\"].cumsum()\n","\n","# Plot Cumulative Performance of Long-Short Strategy\n","import matplotlib.pyplot as plt\n","\n","plt.figure(figsize=(12, 6))\n","plt.plot(long_short_df[\"Cumulative Return\"], label=\"Long-Short Strategy\", color=\"darkblue\")\n","plt.axhline(0, linestyle=\"--\", color=\"gray\")  # Baseline at 0\n","plt.xlabel(\"Time (Months)\")\n","plt.ylabel(\"Cumulative Return\")\n","plt.title(\"Cumulative Return of Long-Short Portfolio\")\n","plt.legend()\n","plt.show()"],"metadata":{"id":"vnCpAoSgTu_v","colab":{"base_uri":"https://localhost:8080/","height":599},"executionInfo":{"status":"ok","timestamp":1741215053635,"user_tz":300,"elapsed":27108,"user":{"displayName":"Miguel Ureña","userId":"14360641195988487898"}},"outputId":"be659def-a1b7-45a2-a20d-18d63a9102c6"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Creating legend with loc=\"best\" can be slow with large amounts of data.\n","  fig.canvas.print_figure(bytes_io, **kw)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}